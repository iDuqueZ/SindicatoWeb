---
// GaleriaFotos.astro
// Componente Astro (server-side) para mostrar las imágenes en public/galeria
// usando CSS columns (estilo Pinterest) y PhotoSwipe (lightbox).
// - No necesitas index.json: el componente usa `fs.readdirSync` en el servidor
//   para leer `public/galeria` al build/SSR.
// - Requiere Tailwind en tu proyecto para las utilidades usadas (columns, break-inside, etc.)
// - Usa PhotoSwipe desde CDN (jsDelivr) para no depender de instalar el paquete.

import fs from 'fs';
import path from 'path';

const galleryDir = path.join(process.cwd(), 'public', 'galeria');
const files = [];
try {
  files = fs.readdirSync(galleryDir)
    .filter(f => /\.(jpe?g|jpeg|png|webp|gif)$/i.test(f))
    // opcional: ordenar alfabéticamente o por fecha
    .sort()
    .map(f => `/galeria/${f}`);
} catch (err) {
  // Si la carpeta no existe, files queda vacío; puedes mostrar un mensaje en UI
  files = [];
}
---

<!-- PhotoSwipe CSS (CDN) -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/photoswipe@5/dist/photoswipe.css" />

<div class="w-full">
  {files.length === 0 ? (
    <div class="p-6 text-sm text-yellow-700 bg-yellow-100 rounded">
      <p class="font-semibold">No se encontraron imágenes en <code>/public/galeria</code>.</p>
      <p class="mt-2">Coloca archivos JPG/PNG en <code>public/galeria/</code> y vuelve a compilar la web.</p>
    </div>
  ) : (
    <!-- Contenedor columns-type Pinterest -->
    <div id="astro-galeria" class="columns-1 sm:columns-2 md:columns-3 lg:columns-4" style="column-gap:1rem">
      {files.map((src, i) => (
        <a key={src} href={src} data-pswp-width="1200" data-pswp-height="800" class="inline-block w-full mb-4">
          <img src={src} alt={`foto-${i}`} loading="lazy" class="w-full block mb-2 rounded-lg shadow-sm break-inside-avoid" />
        </a>
      ))}
    </div>
  )}
</div>

<style>
  /* Asegura que las imágenes no se rompan entre columnas (fallback CSS) */
  .break-inside-avoid { -webkit-column-break-inside: avoid; break-inside: avoid; }
</style>

<!-- Script cliente: actualiza dimensiones al cargar cada imagen y inicializa PhotoSwipe -->
<script type="module">
  (function () {
    const gallery = document.getElementById('astro-galeria');
    if (!gallery) return;

    // Al cargar cada imagen, actualizamos data-pswp-width / data-pswp-height del anchor
    gallery.querySelectorAll('img').forEach(img => {
      if (img.complete && img.naturalWidth) {
        const a = img.closest('a');
        if (a) {
          a.dataset.pswpWidth = img.naturalWidth;
          a.dataset.pswpHeight = img.naturalHeight;
        }
      } else {
        img.addEventListener('load', () => {
          const a = img.closest('a');
          if (a) {
            a.dataset.pswpWidth = img.naturalWidth || 1200;
            a.dataset.pswpHeight = img.naturalHeight || 800;
          }
        });
      }
    });

    // Inicializar PhotoSwipe Lightbox desde CDN (es módulo ESM)
    import('https://cdn.jsdelivr.net/npm/photoswipe@5/dist/photoswipe-lightbox.esm.js')
      .then(module => {
        const PhotoSwipeLightbox = module.default || module.PhotoSwipeLightbox || module;
        const lightbox = new PhotoSwipeLightbox({
          gallery: '#astro-galeria',
          children: 'a',
          pswpModule: () => import('https://cdn.jsdelivr.net/npm/photoswipe@5/dist/photoswipe.esm.js')
        });
        lightbox.init();
      })
      .catch(err => {
        // Si falla la carga desde CDN, el usuario verá thumbnails sin lightbox
        console.error('No se pudo cargar PhotoSwipe desde CDN:', err);
      });
  })();
</script>

<!-- Notas de uso:
1) Coloca tus imágenes en `public/galeria/` (ejemplo: public/galeria/foto1.jpg).
2) Este componente lee `public/galeria` en servidor (build o SSR). No necesita index.json.
3) Rebuild necesario si agregas/eliminas imágenes y usas un sitio estático (porque lee en build time).
4) Si usas un adaptador serverless/edge que no permite `fs` en runtime, entonces
   el listado se hará en build (getStatic) o deberías exponer una API que lea con 'fs'.

Si quieres, adapto el componente para:
- Usar PhotoSwipe desde el paquete npm en vez de CDN (requiere `npm install photoswipe`).
- Calcular lazy placeholders (blur) y un skeleton.
- Incluir paginación o carga incremental (infinite scroll).
-->
